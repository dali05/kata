pipeline {
    agent { label 'Jenkins-Agent' }
    tools {
        jdk 'Java17'
        maven 'Maven3'
    }
       environment {
    	    APP_NAME = "kata-app-pipeline"
            RELEASE = "1.0.0"
            DOCKER_USER = "dali05"
            DOCKER_PASS = 'dockerhub'
            IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
            IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        }

    stages {
        stage("Cleanup Workspace") {
            steps {
                cleanWs()
            }
        }

        stage("Checkout from SCM") {
            steps {
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/dali05/kata'
            }
        }

        stage("Build Backend Application") {
            steps {
                dir('backend') {
                    sh "mvn clean package"
                }
            }
        }

        stage("Test Backend Application") {
            steps {
                dir('backend') {
                    sh "mvn test"
                }
            }
        }

         stage("SonarQube Analysis"){
                   steps {
        	           script {
        	             dir('backend') {
        	                 withSonarQubeEnv(credentialsId: 'jenkins-sonarqube-token') {
                                sh "mvn sonar:sonar"
                             }
        	             }

        	           }
                   }
         }

          stage("Quality Gate"){
                    steps {
                        script {
                            dir('backend') {
                                waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube-token'
                            }
                        }
                     }
          }

          stage("Build & Push Docker Image") {
                      steps {
                          script {
                              docker.withRegistry('',DOCKER_PASS) {
                                  docker_image = docker.build "${IMAGE_NAME}"
                              }

                              docker.withRegistry('',DOCKER_PASS) {
                                  docker_image.push("${IMAGE_TAG}")
                                  docker_image.push('latest')
                              }
                          }
                      }
          }


    }
}

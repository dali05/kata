pipeline {
    agent { label 'Jenkins-Agent' }
    tools {
        jdk 'Java17'
        maven 'Maven3'
    }
       environment {
    	    APP_NAME = "kata-app-pipeline"
            RELEASE = "1.0.0"
            DOCKER_USER = "dali05"
            DOCKER_PASS = 'dockerhub'
            IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
            IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
            JENKINS_API_TOKEN = credentials("JENKINS_API_TOKEN")

        }

    stages {
        stage("Cleanup Workspace") {
            steps {
                cleanWs()
            }
        }

        stage("Checkout from SCM") {
            steps {
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/dali05/kata'
            }
        }

        stage("Build Backend Application") {
            steps {
                dir('backend') {
                    sh "mvn clean package"
                }
            }
        }

        stage("Test Backend Application") {
            steps {
                dir('backend') {
                    sh "mvn test"
                }
            }
        }

         stage("SonarQube Analysis"){
                   steps {
        	           script {
        	             dir('backend') {
        	                 withSonarQubeEnv(credentialsId: 'jenkins-sonarqube-token') {
                                sh "mvn sonar:sonar"
                             }
        	             }

        	           }
                   }
         }

          stage("Quality Gate"){
                    steps {
                        script {
                            dir('backend') {
                                waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube-token'
                            }
                        }
                     }
          }

          stage("Build & Push Docker Image") {
                      steps {
                          script {
                            dir('backend') {
                                docker.withRegistry('',DOCKER_PASS) {
                                     docker_image = docker.build "${IMAGE_NAME}"
                                 }

                                 docker.withRegistry('',DOCKER_PASS) {
                                     docker_image.push("${IMAGE_TAG}")
                                     docker_image.push('latest')
                                 }
                            }
                          }
                      }
          }

           stage("Trivy Scan") {
                     steps {
                         script {
                          dir('backend') {
          	                 sh ('docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image dali05/kata-app-pipeline:latest --no-progress --scanners vuln  --exit-code 0 --severity HIGH,CRITICAL --format table')
                            }
                         }
                     }
           }

            stage('Cleanup Artifacts') {
                      steps {
                          script {
                              dir('backend') {
                                   sh "docker rmi ${IMAGE_NAME}:${IMAGE_TAG}"
                                   sh "docker rmi ${IMAGE_NAME}:latest"
                             }
                          }
                     }
            }

             stage("Trigger CD Pipeline") {
                        steps {
                            script {
                                sh "curl -v -k --user root:${JENKINS_API_TOKEN} -X POST -H 'cache-control: no-cache' -H 'content-type: application/x-www-form-urlencoded' --data 'IMAGE_TAG=1.0.0-29' 'ec2-13-60-250-38.eu-north-1.compute.amazonaws.com:8080/job/gitops-register-app-cd/buildWithParameters?token=gitops-token'"
                            }
                        }
              }
    }
}
